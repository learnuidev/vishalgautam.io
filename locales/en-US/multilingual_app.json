{
  "blog.title": "Multi Lingual App with NextJS, i18next & Myelin AI",
  "blog.description": "In this tutorial, we will learn about translating your NextJS app into multiple languages using i18next and Myelin AI.",
  "titleOne": "Part A: Frontend",
  "stepOne.title": "Step 1: Create NextJS Project",
  "stepOne.paragraphOne": "We will run this command to start a new Next.js project.",
  "stepTwo.title": "Step 2: Add chadcn",
  "stepTwo.paragraphOne": "Next, let's add chadcn to our project. Myelin is heavily inspired by chadcn and uses many of its primitives as building blocks to create custom components such as a language switcher.",
  "stepThree.title": "Step 3: Add locales",
  "stepThree.paragraphOne": "Next, let's add locales to our application. We are going to create a single namespaced locale called common.json inside the locales/en directory. Myelin supports both namespaced and non-namespaced locales, but I highly encourage you to stick to namespaced locales.",
  "stepFour.title": "Step 4: Add i18next boilerplate code",
  "stepFour.paragraphOne": "Next, let's add i18next and its dependencies to our app. We can use the following command to do so:",
  "stepFour.paragraphTwo": "Running this will do the following:",
  "stepFour.paragraphThree": "Install the core i18next library and additional modules for language detection, backend chaining, and resource transformation.",
  "stepFour.paragraphFour": "Implement various utility functions and components in the libs/i18n-next directory, including cookie management, language detection, configuration, providers, and custom hooks for translation functionality.",
  "stepFive.title": "Step 5: Wrap layout.tsx",
  "stepFive.paragraphOne": "We are going to wrap the layout component with I18NextHtmlProvider.",
  "stepSix.title": "Step 6: Generate types",
  "stepSix.paragraph": "Before we can start using the translations, let's generate types. This will help us with type completion when using the useTranslation hook. We can run `npx myelino upsert` and select `i18next.d.ts`. This will generate custom types under the types directory.",
  "stepSeven.title": "Step 7: Use the translations",
  "stepSeven.paragraphOne": "With custom types generated, we can use the custom useTranslation hook like so:",
  "stepSeven.paragraphTwo": "You'll notice type completion when typing namespaces. This is because we generated types in the previous step.",
  "stepSeven.paragraphThree": "We are done with the frontend section. Now, the fun part: multi-lingual translations with Myelin AI.",
  "partTwo.title": "Part B: Multi Lingual Translation with Myelin AI",
  "partTwo.intro": "intro",
  "partTwo.intro.paragraphOne": "Alright, now we have the frontend, we are ready to start our translation infrastructure pipeline with Myelin.",
  "partTwo.intro.paragraphTwo": "Myelin is an open source local-first translation infrastructure that makes it super easy to manage, sync, and run multi-language translations. The first step in using it is to initialize it.",
  "partTwo.intro.paragraphThree": "You will be asked to provide source translation, target translations, and an AI service provider of your choice. If you want, you can even add a custom AI provider. To keep things simple, we are going to select OpenAI.",
  "partTwo.intro.paragraphFour": "You will also need to get your API keys and save them in the .env file."
}
