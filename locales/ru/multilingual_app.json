{
  "blog.title": "Многоязычное приложение с NextJS, i18next и Myelin AI",
  "blog.description": "В этом учебнике мы узнаем, как перевести ваше приложение NextJS на несколько языков с помощью i18next и Myelin AI.",
  "titleOne": "Часть A: Фронтенд",
  "stepOne.title": "Шаг 1: Создание проекта NextJS",
  "stepOne.paragraphOne": "Мы выполним эту команду, чтобы начать новый проект Next.js.",
  "stepTwo.title": "Шаг 2: Добавить Chadcn",
  "stepTwo.paragraphOne": "Теперь давайте добавим Chadcn в наш проект. Myelin сильно вдохновлен Chadcn и использует много его примитивов в качестве строительных блоков для создания пользовательских компонентов, таких как переключатель языков.",
  "stepThree.title": "Шаг 3: Добавить локали",
  "stepThree.paragraphOne": "Теперь давайте добавим локали в наше приложение. Мы собираемся создать одну пространственную локаль под названием common.json в директории locales/en. Myelin поддерживает как пространственные, так и не пространственные локали. Но я настоятельно рекомендую придерживаться пространственных локалей.",
  "stepFour.title": "Шаг 4: Добавить шаблонный код i18next",
  "stepFour.paragraphOne": "Теперь давайте добавим i18n-next и его друзья в наше приложение. Мы можем использовать следующую команду для этого:",
  "stepFour.paragraphTwo": "Запуск этой команды сделает следующее:",
  "stepFour.paragraphThree": "Установит основную библиотеку i18next и дополнительные модули для определения языка, цепочки бэкенда и преобразования ресурсов.",
  "stepFour.paragraphFour": "Реализует различные утилиты и компоненты в директории libs/i18n-next, включая управление куками, определение языка, конфигурацию, провайдеров и пользовательские хуки для функциональности перевода.",
  "stepFive.title": "Шаг 5: Обернуть layout.tsx",
  "stepFive.paragraphOne": "Мы собираемся обернуть компонент layout с I18NextHtmlProvider.",
  "stepSix.title": "Шаг 6: Генерация типов",
  "stepSix.paragraph": "Прежде чем мы сможем начать использовать переводы, давайте создадим типы. Это поможет нам с автозаполнением типов при использовании хука useTranslation. Мы можем выполнить npx myelin.dev@latest upsert и выбрать i18next.d.ts. Это сгенерирует пользовательские типы в каталоге types.",
  "stepSeven.title": "Шаг 7: Использовать переводы",
  "stepSeven.paragraphOne": "С сгенерированными пользовательскими типами мы можем использовать пользовательский хук useTranslation так:",
  "stepSeven.paragraphTwo": "Вы заметите завершение типов при вводе пространств имен. Это до того, как мы сгенерировали типы на предыдущем шаге.",
  "stepSeven.paragraphThree": "Мы завершили раздел фронтенда. Теперь интересная часть — многоязычные переводы с Myelin AI.",
  "partTwo.title": "Часть B: Многоязычный перевод с Myelin AI",
  "partTwo.intro": "введение",
  "partTwo.intro.paragraphOne": "Хорошо, теперь у нас есть фронтенд, мы готовы начать нашу инфраструктурную цепочку перевода с Myelin.",
  "partTwo.intro.paragraphTwo": "Myelin — это открытая переводческая инфраструктура, ориентированная на локальность, которая сильно упрощает управление, синхронизацию и выполнение многоязычных переводов. Первый шаг в использовании заключается в инициализации.",
  "partTwo.intro.paragraphThree": "Вам будет предложено предоставить исходный перевод, целевые переводы и поставщика AI на ваш выбор. Если хотите, вы можете даже добавить собственного поставщика AI. Чтобы все было просто, мы выберем OpenAI.",
  "partTwo.intro.paragraphFour": "Вам также нужно будет получить ваши API-ключи и сохранить их в файле .env.",
  "partTwo.translate.title": "Перевести",
  "partTwo.translate.paragraphOne": "Теперь мы готовы запустить процесс перевода. Мы можем сделать это с помощью следующей команды",
  "partTwo.translate.paragraphTwo": "Когда вы выполняете эту команду, Myelin загружает ваши исходные JSON файлы (например, locales/en/common.json), идентифицирует любые новые или обновленные строки перевода, производит переводы для указанных вами языков и создает или обновляет соответствующие целевые языковые JSON файлы с пространственными именами (например, locales/fr/common.json, locales/es/common.json, locales/zh/common.json).",
  "partTwo.translate.paragraphThree": "Чтобы проверить, действительно ли это работает, мы можем импортировать компонент переключателя языка.",
  "partTwo.translate.note": "Примечание: переключатель языка построен на основе следующих компонентов chadcn: выпадающее меню и кнопка. Чтобы установить их, пожалуйста, используйте этот скрипт:",
  "conclusion": "И всё, вы создали своё собственное многоязычное приложение в стиле чадцн. Молодец!"
}
