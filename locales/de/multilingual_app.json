{
  "blog.title": "Mehrsprachige App mit NextJS, i18next & Myelin AI",
  "blog.description": "In diesem Tutorial werden wir lernen, wie man seine NextJS-App in mehrere Sprachen mit i18next und Myelin AI übersetzt.",
  "titleOne": "Teil A: Frontend",
  "stepOne.title": "Schritt 1: NextJS-Projekt erstellen",
  "stepOne.paragraphOne": "Wir führen diesen Befehl aus, um ein neues NextJS-Projekt zu starten.",
  "stepTwo.title": "Schritt 2: Chadcn hinzufügen",
  "stepTwo.paragraphOne": "Als nächstes fügen wir Chadcn in unser Projekt ein. Myelin ist stark von Chadcn inspiriert und nutzt viele seiner Bausteine, um benutzerdefinierte Komponenten wie den Sprachumschalter zu erstellen.",
  "stepThree.title": "Schritt 3: Lokalisierungen hinzufügen",
  "stepThree.paragraphOne": "Als nächstes fügen wir Lokalisierungen in unsere Anwendung ein. Wir werden eine einzige benannte Lokalisierung namens common.json im Verzeichnis locales/en erstellen. Myelin unterstützt sowohl benamte als auch nicht benannte Lokalisierungen. Aber ich empfehle Ihnen dringend, bei benannten Lokalisierungen zu bleiben.",
  "stepFour.title": "Schritt 4: i18next Boilerplate-Code hinzufügen",
  "stepFour.paragraphOne": "Als nächstes fügen wir i18next und seine Freunde in unsere App ein. Wir können dazu den folgenden Befehl verwenden:",
  "stepFour.paragraphTwo": "Das Ausführen dieses Befehls bewirkt Folgendes:",
  "stepFour.paragraphThree": "Installiert die Kernbibliothek i18next sowie zusätzliche Module zur Spracherkennung, Backend-Verkettung und Ressourcentransformation.",
  "stepFour.paragraphFour": "Implementiert verschiedene Hilfsfunktionen und Komponenten im Verzeichnis libs/i18next, einschließlich Cookie-Verwaltung, Spracherkennung, Konfiguration, Provider und benutzerdefinierte Hooks für die Übersetzungsfunktionalität.",
  "stepFive.title": "Schritt 5: layout.tsx einwickeln",
  "stepFive.paragraphOne": "Wir werden die Layout-Komponente mit I18NextHtmlProvider einwickeln.",
  "stepSix.title": "Schritt 6: Typen generieren",
  "stepSix.paragraph": "Bevor wir mit den Übersetzungen beginnen können, lassen Sie uns die Typen generieren. Dies wird uns bei der Typvervollständigung beim Verwenden des useTranslation-Hooks helfen. Wir können npx myelino upsert ausführen und i18next.d.ts auswählen. Dies generiert benutzerdefinierte Typen im Verzeichnis types.",
  "stepSeven.title": "Schritt 7: Verwenden Sie die Übersetzungen",
  "stepSeven.paragraphOne": "Mit den generierten benutzerdefinierten Typen können wir den benutzerdefinierten useTranslation-Hook wie folgt verwenden:",
  "stepSeven.paragraphTwo": "Sie werden die Typvervollständigung bei der Eingabe von Namensräumen bemerken. Dies ist, bevor wir die Typen im vorherigen Schritt generiert haben.",
  "stepSeven.paragraphThree": "Wir sind mit dem Frontend-Bereich fertig. Jetzt kommt der spannende Teil, mehrsprachige Übersetzungen mit Myelin AI.",
  "partTwo.title": "Teil B: Mehrsprachige Übersetzung mit Myelin AI",
  "partTwo.intro": "Einführung",
  "partTwo.intro.paragraphOne": "Okay, jetzt haben wir das Frontend und sind bereit, unsere Übersetzungsinfrastruktur-Pipeline mit Myelin zu starten.",
  "partTwo.intro.paragraphTwo": "Myelin ist eine Open-Source-Übersetzungsinfrastruktur, die zuerst lokal arbeitet und es super einfach macht, mehrsprachige Übersetzungen zu verwalten, zu synchronisieren und auszuführen. Der erste Schritt zur Verwendung ist, es zu initialisieren.",
  "partTwo.intro.paragraphThree": "Sie werden gebeten, die Quellübersetzung, die Zielübersetzungen und den AI-Dienstanbieter Ihrer Wahl anzugeben. Wenn Sie möchten, können Sie sogar einen benutzerdefinierten AI-Anbieter hinzufügen. Um die Sache einfach zu halten, werden wir OpenAI auswählen.",
  "partTwo.intro.paragraphFour": "Sie müssen auch Ihre API-Schlüssel erhalten und in der .env-Datei speichern.",
  "partTwo.translate.title": "Übersetzen",
  "partTwo.translate.paragraphOne": "Jetzt sind wir bereit, die Übersetzungspipeline auszuführen. Das können wir mit folgendem Befehl tun:",
  "partTwo.translate.paragraphTwo": "Wenn Sie diesen Befehl ausführen, lädt Myelin Ihre Quell-JSON-Dateien (z. B. locales/en/common.json), identifiziert neue oder aktualisierte Übersetzungszeichenfolgen, erstellt Übersetzungen für die von Ihnen angegebenen Zielsprache und erstellt oder aktualisiert die entsprechenden JSON-Dateien für die Zielsprache (z. B. locales/fr/common.json, locales/es/common.json, locales/zh/common.json).",
  "partTwo.translate.paragraphThree": "Um zu überprüfen, ob es tatsächlich funktioniert, können wir die Komponente language-switcher importieren.",
  "partTwo.translate.note": "Hinweis: Der Sprachumschalter ist auf den folgenden Chadcn-Komponenten aufgebaut: Dropdown-Menü und Schaltfläche. Um sie zu installieren, verwenden Sie bitte dieses Skript:",
  "conclusion": "Und das war's, Sie haben Ihre eigene mehrsprachige App im Chadcn-Stil erstellt. Gut gemacht!"
}
