{
  "blog.title": "使用 NextJS、i18next 和 Myelin AI 的多語言應用程式",
  "blog.description": "在這個教程中，我們將學習如何使用 i18next 和 Myelin AI 將您的 NextJS 應用程式翻譯成多種語言。",
  "titleOne": "A部分：前端",
  "stepOne.title": "步驟 1：創建 NextJS 專案",
  "stepOne.paragraphOne": "我們將運行此命令來啟動一個新的 Next.js 專案",
  "stepTwo.title": "步驟 2：添加 chadcn",
  "stepTwo.paragraphOne": "接下來，讓我們將 chadcn 添加到我們的專案中。Myelin 深受 chadcn 的啟發，並利用其許多原始功能作為創建自定義組件的構建塊，如語言切換器。",
  "stepThree.title": "步驟 3：添加語系",
  "stepThree.paragraphOne": "接下來，讓我們在應用程式中添加語系。我們將在 locales/en 目錄中創建一個名為 common.json 的單個命名空間語系。Myelin 支援命名空間和非命名空間語系，但我強烈建議您堅持使用命名空間語系。",
  "stepFour.title": "步驟 4：添加 i18next 樣板代碼",
  "stepFour.paragraphOne": "接下來，讓我們將 i18n-next 和相關組件添加到應用程式中。我們可以使用以下命令來做這件事：",
  "stepFour.paragraphTwo": "運行這個將執行以下操作：",
  "stepFour.paragraphThree": "安裝核心 i18next 庫及語言檢測、後端鏈接和資源轉換的額外模組。",
  "stepFour.paragraphFour": "實現各種公用函數和位於 libs/i18n-next 目錄中的組件，包括 cookie 管理、語言檢測、配置、提供者和翻譯功能的自定義 hooks。",
  "stepFive.title": "步驟 5：包裹 layout.tsx",
  "stepFive.paragraphOne": "我們將使用 I18NextHtmlProvider 包裹布局組件。",
  "stepSix.title": "步驟 6：生成類型",
  "stepSix.paragraph": "在我們開始使用翻譯之前，讓我們生成類型。這將幫助我們在使用 useTranslation hook 時進行類型補全。我們可以運行 npx myelino upsert 並選擇 i18next.d.ts。這將在 types 目錄中生成自定義類型。",
  "stepSeven.title": "步驟 7：使用翻譯",
  "stepSeven.paragraphOne": "生成自定義類型後，我們可以這樣使用自定義 useTranslation hook：",
  "stepSeven.paragraphTwo": "您會注意到在輸入命名空間時會出現類型補全。這是在我們在前一步生成類型之前的情況。",
  "stepSeven.paragraphThree": "我們完成了前端部分。現在是有趣的部分，使用 Myelin AI 進行多語言翻譯。",
  "partTwo.title": "B部分：使用 Myelin AI 進行多語言翻譯",
  "partTwo.intro": "介紹",
  "partTwo.intro.paragraphOne": "好吧，現在我們有了前端，我們準備開始使用 Myelin 建立翻譯基礎設施管道。",
  "partTwo.intro.paragraphTwo": "Myelin 是一個開源的本地優先翻譯基礎設施，使得管理、同步和運行多語言翻譯變得非常簡單。使用它的第一步是初始化它。",
  "partTwo.intro.paragraphThree": "您將被要求提供源翻譯、目標翻譯以及您選擇的 AI 服務提供者。如果您願意，您甚至可以添加自定義的 AI 提供者。為了簡化流程，我們將選擇 openai。",
  "partTwo.intro.paragraphFour": "您還需要獲取 API 金鑰並將其保存在 .env 文件中。",
  "partTwo.translate.title": "翻譯",
  "partTwo.translate.paragraphOne": "現在我們準備好執行翻譯流程。我們可以使用以下命令來完成這個操作",
  "partTwo.translate.paragraphTwo": "當你運行這個命令時，Myelin 將加載你的源 JSON 文件（例如，locales/en/common.json），識別任何新的或更新的翻譯字符串，並生成你指定的目標語言的翻譯，並創建或更新相關的目標語言 JSON 命名空間文件（例如，locales/fr/common.json、locales/es/common.json、locales/zh/common.json）。",
  "partTwo.translate.paragraphThree": "要檢查它是否真的在工作，我們可以導入語言切換組件。",
  "partTwo.translate.note": "注意：語言切換器是基於以下 chadcn 組件構建的：下拉菜單和按鈕。要安裝它們，請使用以下腳本：",
  "conclusion": "就這樣，你已經按照 chadcn 的風格構建了自己的多語言應用程序。幹得好！"
}
