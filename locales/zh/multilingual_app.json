{
  "blog.title": "使用 NextJS、i18next 和 Myelin AI 的多语言应用",
  "blog.description": "在本教程中，我们将学习如何使用 i18next 和 Myelin AI 将您的 NextJS 应用翻译成多种语言。",
  "titleOne": "第一部分：前端",
  "stepOne.title": "步骤 1：创建 NextJS 项目",
  "stepOne.paragraphOne": "我们将运行以下命令来启动一个新的 Next.js 项目。",
  "stepTwo.title": "步骤 2：添加 chadcn",
  "stepTwo.paragraphOne": "接下来，将 chadcn 添加到我们的项目中。Myelin 深受 chadcn 的启发，使用了许多它的原始元素作为构建块，以创建自定义组件，例如语言切换器。",
  "stepThree.title": "步骤 3：添加语言环境",
  "stepThree.paragraphOne": "接下来，将语言环境添加到我们的应用程序中。我们将在 locales/en 目录下创建一个名为 common.json 的单名称空间语言环境。Myelin 支持命名空间和非命名空间语言环境。但我强烈建议您坚持使用命名空间语言环境。",
  "stepFour.title": "步骤 4：添加 i18next 样板代码",
  "stepFour.paragraphOne": "接下来，让我们将 i18n-next 和相关库添加到我们的应用中。我们可以使用以下命令来实现：",
  "stepFour.paragraphTwo": "运行此命令将执行以下操作：",
  "stepFour.paragraphThree": "安装核心 i18next 库及其他语言检测、后端链接和资源转换的附加模块。",
  "stepFour.paragraphFour": "在 libs/i18n-next 目录中实现各种实用程序函数和组件，包括 cookie 管理、语言检测、配置、提供程序和用于翻译功能的自定义 hooks。",
  "stepFive.title": "步骤 5：包装 layout.tsx",
  "stepFive.paragraphOne": "我们将使用 I18NextHtmlProvider 包装布局组件。",
  "stepSix.title": "步骤 6：生成类型",
  "stepSix.paragraph": "在我们开始使用翻译之前，让我们生成类型。这将帮助我们在使用useTranslation钩子时进行类型补全。我们可以运行npx myelin.dev@latest upsert并选择i18next.d.ts。这将生成一个自定义类型，位于types目录下。",
  "stepSeven.title": "步骤 7：使用翻译",
  "stepSeven.paragraphOne": "生成自定义类型后，我们可以像这样使用自定义的 useTranslation hook：",
  "stepSeven.paragraphTwo": "您会注意到在输入名称空间时的类型补全。这是在我们之前的步骤中生成类型之前。",
  "stepSeven.paragraphThree": "前端部分完成了。现在有趣的部分，多语言翻译与 Myelin AI。",
  "partTwo.title": "第二部分：使用 Myelin AI 进行多语言翻译",
  "partTwo.intro": "介绍",
  "partTwo.intro.paragraphOne": "好的，现在我们有了前端，我们准备好使用 Myelin 开始我们的翻译基础设施管道。",
  "partTwo.intro.paragraphTwo": "Myelin 是一个开源的本地优先翻译基础设施，使管理、同步和运行多语言翻译变得非常简单。使用它的第一步是初始化它。",
  "partTwo.intro.paragraphThree": "系统会要求您提供源翻译、目标翻译和您选择的 AI 服务提供商。如果需要，您甚至可以添加自定义 AI 提供商。为简单起见，我们将选择 OpenAI。",
  "partTwo.intro.paragraphFour": "您还需要获取您的 API 密钥并将其保存在 .env 文件中。",
  "partTwo.translate.title": "翻译",
  "partTwo.translate.paragraphOne": "现在我们准备运行翻译管道。我们可以使用以下命令来做到这一点",
  "partTwo.translate.paragraphTwo": "当您运行此命令时，Myelin 会加载您的源 JSON 文件（例如，locales/en/common.json），识别任何新的或更新的翻译字符串，为您指定的目标语言生成翻译，并创建或更新相关的目标语言 JSON 命名空间文件（例如，locales/fr/common.json，locales/es/common.json，locales/zh/common.json）。",
  "partTwo.translate.paragraphThree": "要检查它是否确实工作，我们可以导入语言切换组件。",
  "partTwo.translate.note": "注意：语言切换器是基于以下 chadcn 组件构建的：下拉菜单和按钮。要安装它们，请使用以下脚本：",
  "conclusion": "就这样，您已经构建了自己的多语言应用程序，chadcn 风格。干得好！"
}
