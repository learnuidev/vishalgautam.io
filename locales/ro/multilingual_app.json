{
  "blog.title": "Aplicație Multilingvă cu NextJS, i18next & Myelin AI",
  "blog.description": "În acest tutorial vom învăța despre traducerea aplicației NextJS în mai multe limbi folosind i18next și Myelin AI.",
  "titleOne": "Partea A: Frontend",
  "stepOne.title": "Pasul 1: Creează Proiectul NextJS",
  "stepOne.paragraphOne": "Vom rula această comandă pentru a începe un nou proiect NextJS.",
  "stepTwo.title": "Pasul 2: Adaugă chadcn",
  "stepTwo.paragraphOne": "Următorul pas este să adăugăm chadcn în proiectul nostru. Myelin este puternic inspirat de chadcn și folosește multe dintre primitivele sale ca blocuri de construcție pentru a crea componente personalizate, cum ar fi comutatorul de limbă.",
  "stepThree.title": "Pasul 3: Adaugă localizări",
  "stepThree.paragraphOne": "Următorul pas este să adăugăm localizări în aplicația noastră. Vom crea o localizare numită common.json în directorul locales/en. Myelin suportă atât localizări numite, cât și non-numite. Dar te încurajez să te ții de localizările numite.",
  "stepFour.title": "Pasul 4: Adaugă codul boilerplate i18next",
  "stepFour.paragraphOne": "Următorul pas este să adăugăm i18n-next și prietenii în aplicația noastră. Putem folosi următoarea comandă pentru a face acest lucru:",
  "stepFour.paragraphTwo": "Executarea acesteia va face următoarele:",
  "stepFour.paragraphThree": "Instalarea bibliotecii principale i18next și a modulelor suplimentare pentru detectarea limbii, călării de backend și transformarea resurselor.",
  "stepFour.paragraphFour": "Implementarea diferitelor funcții utilitare și componente în directorul libs/i18n-next, inclusiv gestionarea cookie-urilor, detectarea limbii, configurarea, furnizorii și hook-uri personalizate pentru funcționalitățile de traducere.",
  "stepFive.title": "Pasul 5: Împachetare layout.tsx",
  "stepFive.paragraphOne": "Vom împacheta componenta layout cu I18NextHtmlProvider.",
  "stepSix.title": "Pasul 6: Generează tipuri",
  "stepSix.paragraph": "Înainte să putem începe să folosim traducerile, să generăm tipuri. Acest lucru ne va ajuta cu completarea tipurilor atunci când folosim hook-ul useTranslation. Putem rula npx myelino upsert și selecta i18next.d.ts. Aceasta va genera tipuri personalizate în directorul types.",
  "stepSeven.title": "Pasul 7: Folosește traducerile",
  "stepSeven.paragraphOne": "Cu tipuri personalizate generate, putem folosi hook-ul custom useTranslation astfel:",
  "stepSeven.paragraphTwo": "Vei observa completarea tipurilor când tastezi spațiile de nume. Aceasta se întâmplă înainte să generăm tipurile în pasul anterior.",
  "stepSeven.paragraphThree": "Am terminat cu secțiunea frontend. Acum partea amuzantă, traduceri multilingve cu Myelin AI.",
  "partTwo.title": "Partea B: Traduceri Multilingve cu Myelin AI",
  "partTwo.intro": "intro",
  "partTwo.intro.paragraphOne": "Bine, acum avem frontendul, suntem gata să începem infrastructura de traducere cu Myelin.",
  "partTwo.intro.paragraphTwo": "Myelin este o infrastructură de traducere open source, cu prioritate locală, care face extrem de ușor să gestionezi, sincronizezi și rulezi traduceri în mai multe limbi. Primul pas în utilizarea acestuia este să-l inițializezi.",
  "partTwo.intro.paragraphThree": "Vei fi întrebat să oferi traducerea sursă, traducerile țintă și furnizorul de servicii AI ales de tine. Dacă dorești, poți chiar să adaugi un furnizor de AI personalizat. Pentru a păstra lucrurile simple, vom selecta openai.",
  "partTwo.intro.paragraphFour": "De asemenea, va trebui să obții cheile tale API și să le salvezi în fișierul .env."
}
