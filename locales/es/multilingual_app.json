{
  "blog.title": "Aplicación Multilingüe con NextJS, i18next y Myelin AI",
  "blog.description": "En este tutorial aprenderemos a traducir tu aplicación NextJS a múltiples idiomas utilizando i18next y Myelin AI.",
  "titleOne": "Parte A: Frontend",
  "stepOne.title": "Paso 1: Crear un Proyecto NextJS",
  "stepOne.paragraphOne": "Ejecutaremos este comando para iniciar un nuevo proyecto de NextJS.",
  "stepTwo.title": "Paso 2: Añadir chadcn",
  "stepTwo.paragraphOne": "A continuación, añadiremos chadcn a nuestro proyecto. Myelin está fuertemente inspirado en chadcn y utiliza muchas de sus primitivas como bloques de construcción para crear componentes personalizados como el selector de idiomas.",
  "stepThree.title": "Paso 3: Añadir locales",
  "stepThree.paragraphOne": "A continuación, añadiremos locales a nuestra aplicación. Vamos a crear un único locale con espacio de nombres llamado common.json dentro del directorio locales/en. Myelin soporta tanto locales con espacio de nombres como sin espacio de nombres. Pero te recomiendo encarecidamente que te quedes con los locales con espacio de nombres.",
  "stepFour.title": "Paso 4: Añadir código boilerplate de i18next",
  "stepFour.paragraphOne": "A continuación, añadiremos i18n-next y sus dependencias a nuestra aplicación. Podemos usar el siguiente comando para hacerlo:",
  "stepFour.paragraphTwo": "Ejecutar esto hará lo siguiente:",
  "stepFour.paragraphThree": "Instalar la biblioteca principal de i18next y módulos adicionales para la detección de idiomas, encadenamiento de backend y transformación de recursos.",
  "stepFour.paragraphFour": "Implementar varias funciones y componentes de utilidad en el directorio libs/i18n-next, incluyendo gestión de cookies, detección de idiomas, configuración, proveedores y hooks personalizados para la funcionalidad de traducción.",
  "stepFive.title": "Paso 5: Envolver layout.tsx",
  "stepFive.paragraphOne": "Vamos a envolver el componente layout con I18NextHtmlProvider.",
  "stepSix.title": "Paso 6: Generar tipos",
  "stepSix.paragraph": "Antes de poder empezar a usar las traducciones, generemos los tipos. Esto nos ayudará con la finalización de tipos cuando usemos el hook useTranslation. Podemos ejecutar npx myelino upsert y seleccionar i18next.d.ts. Esto generará tipos personalizados en el directorio types.",
  "stepSeven.title": "Paso 7: Usar las traducciones",
  "stepSeven.paragraphOne": "Con los tipos personalizados generados, podemos usar el hook useTranslation personalizado de la siguiente manera:",
  "stepSeven.paragraphTwo": "Notarás la finalización de tipos al escribir los espacios de nombres. Esto es porque generamos los tipos en el paso anterior.",
  "stepSeven.paragraphThree": "Hemos terminado con la sección de frontend. Ahora viene la parte divertida, las traducciones multilingües con Myelin AI.",
  "partTwo.title": "Parte B: Traducción Multilingüe con Myelin AI",
  "partTwo.intro": "introducción",
  "partTwo.intro.paragraphOne": "Bien, ahora tenemos el frontend, estamos listos para comenzar nuestra infraestructura de traducción con myelin.",
  "partTwo.intro.paragraphTwo": "Myelin es una infraestructura de traducción de código abierto y local, que facilita enormemente la gestión, sincronización y ejecución de traducciones en múltiples idiomas. El primer paso para usarlo es inicializarlo.",
  "partTwo.intro.paragraphThree": "Se te pedirá que proporciones la traducción fuente, las traducciones de destino y el proveedor de servicios de IA de tu elección. Si lo deseas, incluso puedes añadir un proveedor de IA personalizado. Para mantener las cosas simples, seleccionaremos openai.",
  "partTwo.intro.paragraphFour": "También necesitarás obtener tus claves API y guardarlas en el archivo .env.",
  "partTwo.translate.title": "Traducir",
  "partTwo.translate.paragraphOne": "Ahora estamos listos para ejecutar la tubería de traducción. Podemos hacerlo con el siguiente comando.",
  "partTwo.translate.paragraphTwo": "Cuando ejecutas este comando, Myelin carga tus archivos JSON de origen (por ejemplo, locales/en/common.json), identifica cualquier cadena de traducción nueva o actualizada, produce traducciones para los idiomas de destino que especificaste y crea o actualiza los archivos JSON de idioma de destino con nombres de espacio relevantes (por ejemplo, locales/fr/common.json, locales/es/common.json, locales/zh/common.json).",
  "partTwo.translate.paragraphThree": "Para comprobar si realmente está funcionando, podemos importar el componente de cambio de idioma.",
  "partTwo.translate.note": "Para comprobar si realmente está funcionando, podemos importar el componente de cambio de idioma.",
  "conclusion": "Y eso es todo, has construido tu propia aplicación multilingüe, al estilo chadcn. ¡Bien hecho!"
}
