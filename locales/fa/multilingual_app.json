{
  "blog.title": "برنامه چند زبانه با NextJS، i18next و Myelin AI",
  "blog.description": "در این آموزش یاد می‌گیریم که چگونه برنامه NextJS خود را به چندین زبان با استفاده از i18next و Myelin AI ترجمه کنیم.",
  "titleOne": "بخش A: فرانت‌اند",
  "stepOne.title": "گام 1: ایجاد پروژه NextJS",
  "stepOne.paragraphOne": "ما این دستور را برای شروع یک پروژه جدید NextJS اجرا خواهیم کرد.",
  "stepTwo.title": "گام 2: اضافه کردن chadcn",
  "stepTwo.paragraphOne": "سپس بیایید chadcn را به پروژه خود اضافه کنیم. Myelin به شدت از chadcn الهام گرفته است و از بسیاری از ابتدایی‌ترین ساختارهای آن به عنوان بلوک‌های سازنده برای ایجاد اجزای سفارشی مانند سوئیچ زبان استفاده می‌کند.",
  "stepThree.title": "گام 3: اضافه کردن زبان‌ها",
  "stepThree.paragraphOne": "سپس بیایید زبان‌ها را به برنامه خود اضافه کنیم. ما یک زبان فضای نام‌دار واحد با نام common.json در دایرکتوری locales/en ایجاد خواهیم کرد. Myelin از زبان‌های فضای نام‌دار و غیر فضای نام‌دار پشتیبانی می‌کند. اما به شدت توصیه می‌کنم که به زبان‌های فضای نام‌دار پایبند باشید.",
  "stepFour.title": "گام 4: اضافه کردن کد اولیه i18next",
  "stepFour.paragraphOne": "سپس بیایید i18n-next و دوستان را به برنامه خود اضافه کنیم. ما می‌توانیم از دستور زیر برای این کار استفاده کنیم:",
  "stepFour.paragraphTwo": "اجرای این کار اقدامات زیر را انجام می‌دهد:",
  "stepFour.paragraphThree": "کتابخانه اصلی i18next و ماژول‌های اضافی برای شناسایی زبان، زنجیره‌سازی پشتیبان، و تبدیل منابع را نصب می‌کند.",
  "stepFour.paragraphFour": "سرویس‌های مختلف و اجزای موجود در دایرکتوری libs/i18n-next را پیاده‌سازی می‌کند، از جمله مدیریت کوکی، شناسایی زبان، پیکربندی، ارائه‌دهندگان، و hookهای سفارشی برای قابلیت ترجمه.",
  "stepFive.title": "گام 5: بسته‌بندی layout.tsx",
  "stepFive.paragraphOne": "ما قرار است کامپوننت layout را با I18NextHtmlProvider بسته‌بندی کنیم.",
  "stepSix.title": "گام 6: تولید نوع‌ها",
  "stepSix.paragraph": "قبل از اینکه بتوانیم از ترجمه‌ها استفاده کنیم، بیایید نوع‌ها را تولید کنیم. این به ما در تکمیل نوع هنگام استفاده از hook useTranslation کمک خواهد کرد. ما می‌توانیم npx myelino upsert را اجرا کنیم و i18next.d.ts را انتخاب کنیم. این نوع‌های سفارشی را در دایرکتوری types تولید خواهد کرد.",
  "stepSeven.title": "گام 7: استفاده از ترجمه‌ها",
  "stepSeven.paragraphOne": "با تولید نوع‌های سفارشی، می‌توانیم از hook سفارشی useTranslation به این شکل استفاده کنیم:",
  "stepSeven.paragraphTwo": "شما هنگام تایپ کردن فضای نام‌ها، تکمیل نوع را متوجه خواهید شد. این قبل از تولید نوع‌ها در گام قبلی است.",
  "stepSeven.paragraphThree": "ما بخش فرانت‌اند را کامل کردیم. حالا بخش سرگرم‌کننده، ترجمه‌های چند زبانه با Myelin AI.",
  "partTwo.title": "بخش B: ترجمه چند زبانه با Myelin AI",
  "partTwo.intro": "مقدمه",
  "partTwo.intro.paragraphOne": "خوب، حالا که ما فرانت‌اند داریم، آماده هستیم تا زیرساخت ترجمه خود را با Myelin شروع کنیم.",
  "partTwo.intro.paragraphTwo": "Myelin یک زیرساخت ترجمه محلی و منبع باز است که مدیریت، همگام‌سازی و اجرای ترجمه‌های چند زبانه را بسیار آسان می‌سازد. اولین قدم در استفاده از آن، inicializar آن است.",
  "partTwo.intro.paragraphThree": "از شما خواسته می‌شود که ترجمه منبع، ترجمه‌های هدف و ارائه‌دهنده خدمات AI مورد نظر خود را ارائه دهید. اگر بخواهید، می‌توانید حتی یک ارائه‌دهنده AI سفارشی اضافه کنید. برای سادگی، ما OpenAI را انتخاب خواهیم کرد.",
  "partTwo.intro.paragraphFour": "شما همچنین نیاز دارید تا کلیدهای API خود را دریافت کرده و در فایل .env ذخیره کنید."
}
