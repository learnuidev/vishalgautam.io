{
  "blog.title": "Application Multilingue avec NextJS, i18next & Myelin AI",
  "blog.description": "Dans ce tutoriel, nous allons apprendre à traduire votre application NextJS en plusieurs langues en utilisant i18next et myelin ai.",
  "titleOne": "Partie A : Frontend",
  "stepOne.title": "Étape 1 : Créer un projet NextJS",
  "stepOne.paragraphOne": "Nous allons exécuter cette commande pour démarrer un nouveau projet NextJS",
  "stepTwo.title": "Étape 2 : Ajouter chadcn",
  "stepTwo.paragraphOne": "Ensuite, ajoutons chadcn à notre projet. Myelin est fortement inspiré de chadcn et utilise beaucoup de ses primitives comme blocs de construction pour créer des composants personnalisés tels que le sélecteur de langue.",
  "stepThree.title": "Étape 3 : Ajouter des locales",
  "stepThree.paragraphOne": "Ensuite, ajoutons des locales à notre application. Nous allons créer une locale avec un espace de noms appelé common.json dans le répertoire locales/en. Myelin prend en charge les locales avec et sans espace de noms. Mais je vous encourage vivement à utiliser des locales avec espace de noms.",
  "stepFour.title": "Étape 4 : Ajouter le code boilerplate i18next",
  "stepFour.paragraphOne": "Ensuite, ajoutons i18n-next et ses amis à notre application. Nous pouvons utiliser la commande suivante pour ce faire :",
  "stepFour.paragraphTwo": "L'exécution de cette commande fera ce qui suit :",
  "stepFour.paragraphThree": "Installer la bibliothèque principale i18next et des modules supplémentaires pour la détection de langue, le chaînage backend et la transformation des ressources.",
  "stepFour.paragraphFour": "Mettre en œuvre diverses fonctions utilitaires et composants dans le répertoire libs/i18n-next, y compris la gestion des cookies, la détection de langue, la configuration, les fournisseurs et les hooks personnalisés pour la fonctionnalité de traduction.",
  "stepFive.title": "Étape 5 : Encapsuler layout.tsx",
  "stepFive.paragraphOne": "Nous allons encapsuler le composant layout avec I18NextHtmlProvider",
  "stepSix.title": "Étape 6 : Générer les types",
  "stepSix.paragraph": "Avant de pouvoir commencer à utiliser les traductions, générons les types. Cela nous aidera avec la complétion de type lors de l'utilisation du hook useTranslation. Nous pouvons exécuter npx myelino upsert et sélectionner i18next.d.ts. Cela va générer des types personnalisés dans le répertoire types.",
  "stepSeven.title": "Étape 7 : Utiliser les traductions",
  "stepSeven.paragraphOne": "Avec les types personnalisés générés, nous pouvons utiliser le hook useTranslation personnalisé comme ceci :",
  "stepSeven.paragraphTwo": "Vous remarquerez la complétion de type lors de la saisie des espaces de noms. C'est parce que nous avons généré les types à l'étape précédente.",
  "stepSeven.paragraphThree": "Nous avons terminé la section frontend. Maintenant, la partie amusante, les traductions multilingues avec Myelin AI.",
  "partTwo.title": "Partie B : Traduction multilingue avec Myelin AI",
  "partTwo.intro": "introduction",
  "partTwo.intro.paragraphOne": "D'accord, maintenant que nous avons le frontend, nous sommes prêts à commencer notre pipeline d'infrastructure de traduction avec myelin.",
  "partTwo.intro.paragraphTwo": "Myelin est une infrastructure de traduction open source, locale en priorité, qui rend super facile la gestion, la synchronisation et l'exécution de traductions multilingues. La première étape pour l'utiliser est de l'initialiser.",
  "partTwo.intro.paragraphThree": "Vous serez invité à fournir la traduction source, les traductions cibles et le fournisseur de services d'IA de votre choix. Si vous le souhaitez, vous pouvez même ajouter un fournisseur d'IA personnalisé. Pour simplifier les choses, nous allons sélectionner openai.",
  "partTwo.intro.paragraphFour": "Vous devrez également obtenir vos clés API et les enregistrer dans le fichier .env",
  "partTwo.translate.title": "Traduire",
  "partTwo.translate.paragraphOne": "Maintenant, nous sommes prêts à exécuter le pipeline de traduction. Nous pouvons le faire avec la commande suivante",
  "partTwo.translate.paragraphTwo": "Lorsque vous exécutez cette commande, Myelin charge vos fichiers JSON source (par exemple, locales/en/common.json), identifie toute nouvelle chaîne de traduction ou toute chaîne mise à jour, produit des traductions pour vos langues cibles spécifiées et crée ou met à jour les fichiers JSON de langue cible correspondants avec espace de noms (par exemple, locales/fr/common.json, locales/es/common.json, locales/zh/common.json).",
  "partTwo.translate.paragraphThree": "Pour vérifier si cela fonctionne vraiment, nous pouvons importer le composant de changement de langue.",
  "partTwo.translate.note": "Pour vérifier si cela fonctionne vraiment, nous pouvons importer le composant de changement de langue.",
  "conclusion": "Et c'est tout, vous avez construit votre propre application multilingue, à la manière de chadcn. Bien joué !"
}
